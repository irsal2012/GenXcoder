{
  "project_id": "test-project-123",
  "project_name": "test01",
  "user_input": "Create a simple calculator app",
  "timestamp": "2025-01-07T21:09:00",
  "code": {
    "final_code": "\ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n\ndef multiply(a, b):\n    return a * b\n\ndef divide(a, b):\n    if b != 0:\n        return a / b\n    else:\n        return \"Error: Division by zero\"\n\nif __name__ == \"__main__\":\n    print(\"Simple Calculator\")\n    print(\"1. Add\")\n    print(\"2. Subtract\")\n    print(\"3. Multiply\")\n    print(\"4. Divide\")\n    \n    choice = input(\"Enter choice (1-4): \")\n    \n    if choice in ['1', '2', '3', '4']:\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n        \n        if choice == '1':\n            print(f\"Result: {add(num1, num2)}\")\n        elif choice == '2':\n            print(f\"Result: {subtract(num1, num2)}\")\n        elif choice == '3':\n            print(f\"Result: {multiply(num1, num2)}\")\n        elif choice == '4':\n            print(f\"Result: {divide(num1, num2)}\")\n    else:\n        print(\"Invalid choice\")\n",
    "additional_modules": []
  },
  "documentation": {
    "readme": "# Simple Calculator\n\nA basic calculator application that performs arithmetic operations.\n\n## Features\n- Addition\n- Subtraction\n- Multiplication\n- Division (with zero-division protection)\n\n## Usage\nRun the script and follow the prompts to perform calculations.\n"
  },
  "tests": {
    "test_code": "\nimport unittest\nfrom main import add, subtract, multiply, divide\n\nclass TestCalculator(unittest.TestCase):\n    \n    def test_add(self):\n        self.assertEqual(add(2, 3), 5)\n        self.assertEqual(add(-1, 1), 0)\n    \n    def test_subtract(self):\n        self.assertEqual(subtract(5, 3), 2)\n        self.assertEqual(subtract(0, 5), -5)\n    \n    def test_multiply(self):\n        self.assertEqual(multiply(3, 4), 12)\n        self.assertEqual(multiply(-2, 3), -6)\n    \n    def test_divide(self):\n        self.assertEqual(divide(10, 2), 5)\n        self.assertEqual(divide(7, 0), \"Error: Division by zero\")\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  "deployment": {
    "deployment_configs": "# Deployment Guide\n\n## Local Deployment\n1. Ensure Python 3.6+ is installed\n2. Run: `python main.py`\n\n## Requirements\n- Python 3.6+\n- No external dependencies required\n\n## Testing\nRun tests with: `python test_main.py`\n"
  },
  "pipeline_metadata": {
    "success": true,
    "execution_time_seconds": 45.2
  }
}